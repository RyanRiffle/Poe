// Generated by CoffeeScript 1.8.0

/*
Base class for all styles including TextStyle and paragraphStyle.
 */

(function() {
  Poe.Style = (function() {

    /*
    Creates a new Poe.Style. This is not meant to instantiated, however is
    meant to be extended
    @see Poe.TextStyle
    @see Poe.ParagraphStyle
     */
    function Style(textCursor) {
      this.textCursor = textCursor;
      this.changedCallbacks = [];
    }


    /*
    Set the {Poe.TextCursor} that this style would use
    when applying a style to the TextObject that contains the cursor.
    
    @throw [Error] error if textCursor is not a {Poe.TextCursor}
    @param textCursor [Poe.TextCursor] textCursor
    @return [Poe.Style] this
     */

    Style.prototype.setTextCursor = function(textCursor) {
      if (!textCursor instanceof Poe.TextCursor) {
        throw new Error('textCursor must be a Poe.TextCursor');
      }
      this.textCursor = textCursor;
      return this;
    };


    /*
    Override in extended class. Should copy
    the different parts of style to this
    @param style [Poe.Style] the style to clone
    @return [Poe.Style] this
     */

    Style.prototype.clone = function(style) {
      return this;
    };


    /*
    Register a callback to be called when the style has changed.
    @throws [Error] error if callbackFn is not a function
    @param callbackFn [Function] a function that takes one argument which will be {Poe.Style}
    @return [Poe.Style] this
     */

    Style.prototype.changed = function(callbackFn) {
      if (typeof callbackFn !== 'function') {
        throw new Error('Expects a function as an argument.');
      }
      this.changedCallbacks.append(callbackFn);
      return this;
    };


    /*
    Convenience function to call all registered changed callbacks.
     */

    Style.prototype.hasChanged = function() {
      var callback, _i, _len, _ref, _results;
      _ref = this.changedCallbacks;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        callback = _ref[_i];
        _results.push(callback(this));
      }
      return _results;
    };

    Style.rgbToHex = function(rgb) {
      var hex;
      rgb = rgb.match(/^rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+))?\)$/);
      hex = function(x) {
        return ("0" + parseInt(x).toString(16)).slice(-2);
      };
      return "#" + hex(rgb[1]) + hex(rgb[2]) + hex(rgb[3]);
    };

    return Style;

  })();

}).call(this);

//# sourceMappingURL=Style.js.map
