// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Poe.ToolbarHelper = (function() {
    function ToolbarHelper(writer) {
      this.writer = writer;
      this.btnListNumberClicked = __bind(this.btnListNumberClicked, this);
      this.btnListBulleftClicked = __bind(this.btnListBulleftClicked, this);
      this.colorClicked = __bind(this.colorClicked, this);
      this.btnAlignJustifyClicked = __bind(this.btnAlignJustifyClicked, this);
      this.btnAlignRightClicked = __bind(this.btnAlignRightClicked, this);
      this.btnAlignCenterClicked = __bind(this.btnAlignCenterClicked, this);
      this.btnAlignLeftClicked = __bind(this.btnAlignLeftClicked, this);
      this.fontSizeClicked = __bind(this.fontSizeClicked, this);
      this.fontClicked = __bind(this.fontClicked, this);
      this.handleShortcut = __bind(this.handleShortcut, this);
      this.btnUnderlineClicked = __bind(this.btnUnderlineClicked, this);
      this.btnItalicClicked = __bind(this.btnItalicClicked, this);
      this.btnBoldClicked = __bind(this.btnBoldClicked, this);
      this.handlePageSize = __bind(this.handlePageSize, this);
      if (!this.writer) {
        throw new Error('Poe.ToolbarHelper takes exactly one argument of type Poe.Writer');
      }
      this.textCursor = this.writer.document.textCursor;
      this.textStyle = this.textCursor.textStyle;
      this.paragraphStyle = this.textCursor.paragraphStyle;
      this.fontSizes = [8, 9, 10, 11, 12, 14, 18, 24, 30, 36, 48, 60, 72, 96];
      this.colors = ['black', '#428bca', '#5cb85c', '#5bc0de', '#f0ad4e', '#d9534f', '#555', '#777'];
      this.fontManager = new Poe.FontManager();
      $('body').keydown(this.handleShortcut);
    }

    ToolbarHelper.prototype.init = function() {
      return this.fontManager.loadDefaults();
    };


    /*
    	Add an event handler. This is just a helper function that sets up events for
    	the Poe.TextCursor and Poe.FontManager
    
    	Valid events are:
    	textStyleChanged - Called when the text formatting has changed. fn(Poe.TextStyle)
    	paragraphStyleChanged - Called when the paragraph style changed. fn(Poe.ParagraphStyle)
    	fontAdded - Called when a font has been added. fn(FontName)
     */

    ToolbarHelper.prototype.addEventHandler = function(event, callback) {
      switch (event) {
        case 'textStyleChanged':
          return this.textStyle.changed(callback);
        case 'paragraphStyleChanged':
          return this.paragraphStyle.changed(callback);
        case 'fontAdded':
          return this.fontManager.on('newFont', callback);
      }
    };

    ToolbarHelper.prototype.handlePageSize = function(sizeName) {
      var size;
      size = Poe.Document.PageSize[sizeName];
      if (!sizeName) {
        console.log("[POE ERROR]: Invalid page size `" + sizeName + "`");
        return;
      }
      return this.writer.document.setPageSize(size);
    };

    ToolbarHelper.prototype.btnBoldClicked = function() {
      this.textStyle.bold = !this.textStyle.bold;
      return this.textStyle.applyChar();
    };

    ToolbarHelper.prototype.btnItalicClicked = function() {
      this.textStyle.italic = !this.textStyle.italic;
      return this.textStyle.applyChar();
    };

    ToolbarHelper.prototype.btnUnderlineClicked = function() {
      this.textStyle.underline = !this.textStyle.underline;
      return this.textStyle.applyChar();
    };

    ToolbarHelper.prototype.handleShortcut = function(event) {
      var toggle;
      if (!event.ctrlKey) {
        return;
      }
      toggle = (function(_this) {
        return function(button) {
          if (button === 'bold') {
            _this.textStyle.bold = !_this.textStyle.bold;
          } else if (button === 'italic') {
            _this.textStyle.italic = !_this.textStyle.italic;
          } else if (button === 'underline') {
            _this.textStyle.underline = !_this.textStyle.underline;
          }
          return _this.textStyle.applyChar();
        };
      })(this);
      switch (event.keyCode) {
        case Poe.key.B:
          event.preventDefault();
          return toggle('bold');
        case Poe.key.I:
          event.preventDefault();
          return toggle('italic');
        case Poe.key.U:
          event.preventDefault();
          return toggle('underline');
        default:
          return event.preventDefault();
      }
    };

    ToolbarHelper.prototype.fontClicked = function(fontName) {
      this.textStyle.font = fontName;
      return this.textStyle.applyChar();
    };


    /*
    	Paragraph alignment button helpers
     */

    ToolbarHelper.prototype.fontSizeClicked = function(size) {
      this.textStyle.fontSize = parseInt(size.replace('px', ''));
      return this.textStyle.applyChar();
    };

    ToolbarHelper.prototype.btnAlignLeftClicked = function() {
      this.paragraphStyle.align = Poe.ParagraphStyle.Align.Left;
      return this.paragraphStyle.apply();
    };

    ToolbarHelper.prototype.btnAlignCenterClicked = function() {
      this.paragraphStyle.align = Poe.ParagraphStyle.Align.Center;
      return this.paragraphStyle.apply();
    };

    ToolbarHelper.prototype.btnAlignRightClicked = function() {
      this.paragraphStyle.align = Poe.ParagraphStyle.Align.Right;
      return this.paragraphStyle.apply();
    };

    ToolbarHelper.prototype.btnAlignJustifyClicked = function() {
      this.paragraphStyle.align = Poe.ParagraphStyle.Align.Justify;
      return this.paragraphStyle.apply();
    };

    ToolbarHelper.prototype.colorClicked = function(color) {
      this.textStyle.color = color;
      return this.textStyle.applyChar();
    };

    ToolbarHelper.prototype.btnListBulleftClicked = function() {
      return this.createList(Poe.List.ListType.Bullets);
    };

    ToolbarHelper.prototype.btnListNumberClicked = function() {
      return this.createList(Poe.List.ListType.Numbers);
    };

    ToolbarHelper.prototype.createList = function(type) {
      var list, paragraph;
      list = new Poe.List();
      list.setListType(type);
      paragraph = this.textCursor.currentParagraph();
      if (paragraph instanceof Poe.List) {
        paragraph.append(list);
      } else {
        list.insertAfter(paragraph);
      }
      this.textCursor.moveInside(list.child(0).child(0));
      return this.textStyle.applyChar();
    };

    return ToolbarHelper;

  })();

}).call(this);

//# sourceMappingURL=ToolbarHelper.js.map
