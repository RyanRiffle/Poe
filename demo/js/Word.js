// Generated by CoffeeScript 1.8.0

/*
Poe.Word is the base of all text in the document. With no formatting
in the document and only text, each Poe.Word contains one text word
followed by a space. However once formatting comes in words are split
and that is not always the case.
 */

(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Poe.Word = (function(_super) {
    __extends(Word, _super);


    /*
    Creates a new Poe.Word.
    @param text [String] optional text to put in word
     */

    function Word(text) {
      this.element = $('<span class="word"></span>');
      $('body').append(this.element);
      if (typeof text === 'string') {
        this.append(text);
      }
    }


    /*
    Appends a string to the word.
    @param text [String] the string to append
    @return [Poe.Word] this
     */

    Word.prototype.append = function(text) {
      var i, _i, _ref;
      for (i = _i = 0, _ref = text.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.element.append($(text[i]));
      }
      return this;
    };


    /*
    Prepends a string to the word.
    @param text [String] the string to prepend
    @return [Poe.Word] this
     */

    Word.prototype.prepend = function(text) {
      var i, _i, _ref;
      for (i = _i = 0, _ref = text.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.element.prepend($(text[i]));
      }
      return this;
    };


    /*
    Gets and returns the child nodes of the word.
    @note This could include the Poe.TextCursor
    @return [jQuery] jQuery object of all child nodes
     */

    Word.prototype.children = function() {
      var ret;
      ret = $(this.element[0].childNodes);
      return ret;
    };

    Word.prototype.child = function(index) {
      if (index >= 0 && index < this.element[0].childNodes.length) {
        return $(this.element[0].childNodes[index]);
      }
      return null;
    };

    Word.prototype.isEmpty = function() {
      if (this.children().length === 0) {
        return true;
      }
      if (this.children().length === 1 && !this.child(0).hasClass('textcursor') && this.child(0)[0].textContent.charCodeAt(0) === 8203) {
        return true;
      }
      return false;
    };

    return Word;

  })(Poe.TextObject);

}).call(this);

//# sourceMappingURL=Word.js.map
