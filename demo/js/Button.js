// Generated by CoffeeScript 1.8.0

/*
A button for use on the toolbar when in standalone mode.
 */

(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Poe.Button = (function(_super) {
    __extends(Button, _super);


    /*
    Creates a Poe.Button and returns it
    @param [Poe.ToolBar] toolbar to add the button to
    @param [string] Button text (if any)
    @param [string] The tooltip position ("top", "right", "bottom", "left")
     */

    function Button(toolbar, text, tooltip, tooltipPos) {
      if (text == null) {
        text = "";
      }
      if (tooltip == null) {
        tooltip = "";
      }
      if (tooltipPos == null) {
        tooltipPos = "right";
      }
      this.button = $('<button type="button" class="btn btn-default"></button>');
      this.text = $('<span class="text"></span>');
      this.setText(text);
      toolbar.element.append(this.button);
      this.button.append(this.text);
      if (tooltip !== "") {
        this.setTooltip(tooltip, tooltipPos);
      }
    }


    /*
    Set the buttons text
    @param [string] text
     */

    Button.prototype.setText = function(text) {
      return this.text.html(text);
    };


    /*
    Set the tooltip text and position
    @param text [string] the tooltip text
    @param position [string] The position ("top", "right", "bottom", "left")
     */

    Button.prototype.setTooltip = function(text, position) {
      this.button.addClass('poe-tooltip');
      this.button.attr('title', text);
      return this.button.attr('data-placement', position);
    };


    /*
    Sets the icon to a {Poe.Glyphicon} using Twitter Bootstrap's supplied icons.
    @see http://glyphicons.com/
    
    @param icon [Poe.Glyphicon] the icon to use
     */

    Button.prototype.setIcon = function(icon) {
      return this.button.prepend(icon.element());
    };


    /*
    Register an event callback. Valid events are:
    
    click -- button click event
    
    @param event [string]
    @param callback [function] the callback to call
     */

    Button.prototype.on = function(event, callback) {
      if (event === 'click') {
        return this.button.click(callback);
      }
    };


    /*
    Get the dom element of the button.
    @return [jQuery object] jQuery wrapped around HTMLButtonElement
     */

    Button.prototype.element = function() {
      return this.button;
    };


    /*
    Set the button as active, for toggleable buttons.
    @param onoff [boolean] whether the button should be active
     */

    Button.prototype.active = function(onoff) {
      if (onoff) {
        return this.button.addClass('active');
      } else {
        return this.button.removeClass('active');
      }
    };

    return Button;

  })(Poe.ToolBarItem);

}).call(this);

//# sourceMappingURL=Button.js.map
