// Generated by CoffeeScript 1.8.0

/*
Poe.ParagraphStyle handles any kind of style that should
be applied to a Poe.paragraph.
 */

(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Poe.ParagraphStyle = (function(_super) {
    __extends(ParagraphStyle, _super);


    /*
    Creates a new Poe.ParagraphStyle
    @param textCursor [Poe.TextCursor] the cursor that this style will operate on
     */

    function ParagraphStyle(textCursor) {
      this.textCursor = textCursor;
      this.align = Poe.ParagraphStyle.Align.Left;
      this.changedCallbacks = [];
    }


    /*
    Makes this style the same as style
    @throw [Error] Error if style is not a Poe.ParagraphStyle
    @param style [Poe.ParagraphStyle] the style to clonse
    @return [Poe.ParagraphStyle] this
     */

    ParagraphStyle.prototype.clone = function(style) {
      if (!style instanceof Poe.ParagraphStyle) {
        throw new Error('Poe.ParagraphStyle cannot clone antyhing but a instance of Poe.ParagraphStyle');
      }
      this.align = style.align;
      return this;
    };


    /*
    Apply style to paragraph.
    @throws [Error] if paragraph is not a Poe.Paragraph
    @param paragraph [Poe.paragraph] Optional. Defaults to textCursor.currentparagraph.
    @return [Poe.ParagraphStyle] this
     */

    ParagraphStyle.prototype.apply = function(paragraph) {
      if (!paragraph && this.textCursor) {
        paragraph = this.textCursor.currentParagraph();
      }
      if (!paragraph instanceof Poe.Paragraph) {
        throw new Error('Argument must be a Poe.paragraph');
      }
      paragraph.element.attr('align', this.align);
      this.hasChanged();
      return this;
    };


    /*
    Update this style with the style of paragraph. If paragraph is not
    specified it default to the textCursor's current paragraph if it has
    a textCursor
    @see Poe.Style#setTextCursor
    @see Poe.ParagraphStyle#constructor
    @param paragraph [Poe.Paragraph] the paragraph
     */

    ParagraphStyle.prototype.update = function(paragraph) {
      var element;
      if (!paragraph && this.textCursor) {
        paragraph = this.textCursor.currentParagraph();
      }
      if (!paragraph instanceof Poe.Paragraph) {
        throw new Error('Argument must be a Poe.paragraph');
      }
      element = paragraph.element;
      if (element.attr('align') === Poe.ParagraphStyle.Align.Left) {
        this.align = Poe.ParagraphStyle.Align.Left;
      } else if (element.attr('align') === Poe.ParagraphStyle.Align.Center) {
        this.align = Poe.ParagraphStyle.Align.Center;
      } else if (element.attr('align') === Poe.ParagraphStyle.Align.Right) {
        this.align = Poe.ParagraphStyle.Align.Right;
      } else if (element.attr('align') === Poe.ParagraphStyle.Align.Justify) {
        this.align = Poe.ParagraphStyle.Align.Justify;
      }
      return this.hasChanged();
    };


    /*
    "Enum" of paragraph alignments
     */

    ParagraphStyle.Align = {
      Left: 'left',
      Center: 'center',
      Right: 'right',
      Justify: 'justify'
    };

    return ParagraphStyle;

  })(Poe.Style);

}).call(this);

//# sourceMappingURL=ParagraphStyle.js.map
