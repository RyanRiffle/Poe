// Generated by CoffeeScript 1.8.0

/*
Poe.Glpyhicon provides a wrapper around the icons provided by Bootstrap. In an
effort to abstract away the DOM.
 */

(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Poe.Glyphicon = (function(_super) {
    __extends(Glyphicon, _super);


    /*
    Creates a icon
    
    @param icon [string] the icon class used in bootstrap without 'glyphicon-'
    @param parent [Poe.ToolBarItem] the item to add the icon to if any
    @see http://getbootstrap.com/components/#glyphicons
     */

    function Glyphicon(icon, parent) {
      if (icon == null) {
        icon = 'tree-conifer';
      }
      this.span = $('<span class="glyphicon"></span>');
      this.setIcon(icon);
      if (parent) {
        this.parent.element().prepend(this.span);
      }
    }


    /*
    Set the icon being used to icon.
    
    @param icon [string] the icon class used in bootstrap without 'glyphicon-'
    @return [Poe.Glyphicon] this for method chaining
     */

    Glyphicon.prototype.setIcon = function(icon) {
      this.span.attr('class', 'glyphicon');
      icon = 'glyphicon-' + icon;
      this.span.addClass(icon);
      return this;
    };


    /*
    Returns the element this class provides a wrapper around.
    @return [jQuery] jQuery object for the element
     */

    Glyphicon.prototype.element = function() {
      return this.span;
    };

    return Glyphicon;

  })(Poe.ToolBarItem);

}).call(this);

//# sourceMappingURL=Glyphicon.js.map
