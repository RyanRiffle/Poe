// Generated by CoffeeScript 1.8.0

/*
Poe.Paragraph's sole purpose is to hold a Poe.Line. It is used by
Poe.TextCursor when the user presses return. Which then creates
a new paragraph.
 */

(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Poe.Paragraph = (function(_super) {
    __extends(Paragraph, _super);


    /*
    Creates a new Poe.Paragraph. This also creates a new {Poe.Line} as a child.
    @param page [Poe.Page] Optional. The page to set as this paragraphs parent.
    @note The paragraph is appended to the page if page is supplied.
     */

    function Paragraph(page) {
      var line;
      this.children = [];
      this.element = $('<p class="paragraph" align="left"></p>');
      $('body').append(this.element);
      this.element.attr('name', "_pgraph" + Poe.Paragraph.Counter);
      Poe.Paragraph.Counter += 1;
      if (page) {
        page.append(this);
      }
      line = new Poe.Line();
      this.append(line);
    }

    Paragraph.prototype.name = function() {
      return this.element.attr('name');
    };

    Paragraph.prototype.setName = function(name) {
      return this.element.attr('name', name);
    };

    Paragraph.Counter = 0;

    return Paragraph;

  })(Poe.TextObject);

}).call(this);

//# sourceMappingURL=Paragraph.js.map
