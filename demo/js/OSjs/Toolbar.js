// Generated by CoffeeScript 1.8.0

/*
Toolbar for use with OS.js
 */

(function() {
  var self;

  self = null;

  Poe.OSjs.Toolbar = function(poeWriter, win, name, opts) {
    self = this;
    this.poe = poeWriter;
    this.window = win;
    return OSjs.GUI.ToolBar.apply(this, [name, opts]);
  };

  Poe.OSjs.Toolbar.prototype = Object.create(OSjs.GUI.ToolBar.prototype);

  Poe.OSjs.Toolbar.prototype.init = function() {
    var el;
    el = OSjs.GUI.ToolBar.prototype.init.apply(this, ['PoeToolbar']);
    this.setup();
    return el;
  };


  /*
  Sets up the toolbar by creating the buttons, and registering event handlers.
   */

  Poe.OSjs.Toolbar.prototype.setup = function() {
    var defaultFont, size, _createIcon, _i, _len, _ref;
    _createIcon = function(icon) {
      return OSjs.API.getThemeResource(icon, 'icon');
    };
    this.fontSizeSelect = new OSjs.GUI.Select("FontSizeSelect", {
      onChange: this.fontSizeClicked
    });
    this.fontSelect = new OSjs.GUI.Select("FontSelect", {
      onChange: this.fontSelectClicked
    });
    this.addItem('FontSelect', {
      type: 'custom',
      onCreate: function(itemName, itemOpts, outerEl, containerEl) {
        this.window._addGUIElement(this.fontSelect, containerEl);
        return $(containerEl).width(100);
      }
    });
    this.addItem('FontSizeSelect', {
      type: 'custom',
      onCreate: (function(_this) {
        return function(itemName, itemOpts, outerEl, containerEl) {
          _this.window._addGUIElement(_this.fontSizeSelect, containerEl);
          return $(containerEl).width(45);
        };
      })(this)
    });
    this.addItem('ButtonBold', {
      toggleable: true,
      onClick: this.poe.toolbarHelper.btnBoldClicked,
      icon: _createIcon('actions/format-text-bold.png')
    });
    this.addItem('ButtonItalic', {
      toggleable: true,
      onClick: this.poe.toolbarHelper.btnItalicClicked,
      icon: _createIcon('actions/format-text-italic.png')
    });
    this.addItem('ButtonUnderline', {
      toggleable: true,
      onClick: this.poe.toolbarHelper.btnUnderlineClicked,
      icon: _createIcon('actions/format-text-underline.png')
    });
    this.addSeparator();
    this.addItem('ButtonAlignLeft', {
      toggleable: true,
      grouped: true,
      onClick: this.poe.toolbarHelper.btnAlignLeftClicked,
      icon: _createIcon('actions/format-justify-left.png')
    });
    this.addItem('ButtonAlignCenter', {
      toggleable: true,
      grouped: true,
      onClick: this.poe.toolbarHelper.btnAlignCenterClicked,
      icon: _createIcon('actions/format-justify-center.png')
    });
    this.addItem('ButtonAlignRight', {
      toggleable: true,
      grouped: true,
      onClick: this.poe.toolbarHelper.btnAlignRightClicked,
      icon: _createIcon('actions/format-justify-right.png')
    });
    this.addSeparator();
    this.render();
    _ref = this.poe.toolbarHelper.fontSizes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      size = _ref[_i];
      this.fontSizeSelect.addItem(size, size);
    }
    this.poe.toolbarHelper.addEventHandler('fontAdded', (function(_this) {
      return function(font) {
        return _this.fontSelect.addItem(font, font);
      };
    })(this));
    this.poe.toolbarHelper.addEventHandler('textStyleChanged', this.handleTextStyleChanged);
    this.poe.toolbarHelper.addEventHandler('paragraphStyleChanged', this.handleParagraphStyleChanged);

    /*for font in OSjs.API.getHandlerInstance().getConfig('Fonts').list
    		console.log font
    		@fontSelect.addItem font, font
     */
    this.fontSizeSelect.setValue('12');
    defaultFont = OSjs.API.getHandlerInstance().getConfig('Fonts')['default'];
    this.fontSelect.setValue(defaultFont);
    this.poe.toolbarHelper.fontClicked(defaultFont);
    return this.poe.toolbarHelper.fontManager.loadDefaults();
  };

  Poe.OSjs.Toolbar.prototype.fontSizeClicked = function(selectRef, event, value) {
    return self.poe.toolbarHelper.fontSizeClicked(self.fontSizeSelect.getValue());
  };

  Poe.OSjs.Toolbar.prototype.fontSelectClicked = function(selectRef, event, value) {
    return self.poe.toolbarHelper.fontClicked(self.fontSelect.getValue());
  };

  Poe.OSjs.Toolbar.prototype.handleTextStyleChanged = function(textStyle) {
    self.fontSelect.setValue(textStyle.font);
    self.fontSizeSelect.setValue(textStyle.fontSize);
    if (textStyle.bold) {
      $('.ButtonBold').children('button').addClass('Active');
    } else {
      $('.ButtonBold').children('button').removeClass('Active');
    }
    if (textStyle.italic) {
      $('.ButtonItalic').children('button').addClass('Active');
    } else {
      $('.ButtonItalic').children('button').removeClass('Active');
    }
    if (textStyle.underline) {
      return $('.ButtonUnderline').children('button').addClass('Active');
    } else {
      return $('.ButtonUnderline').children('button').removeClass('Active');
    }
  };

  Poe.OSjs.Toolbar.prototype.handleParagraphStyleChanged = function(pstyle) {
    $('.ButtonAlignLeft').children('button').removeClass('Active');
    $('.ButtonAlignCenter').children('button').removeClass('Active');
    $('.ButtonAlignRight').children('button').removeClass('Active');
    switch (pstyle.align) {
      case Poe.ParagraphStyle.Align.Left:
        return $('.ButtonAlignLeft').children('button').addClass('Active');
      case Poe.ParagraphStyle.Align.Center:
        return $('.ButtonAlignCenter').children('button').addClass('Active');
      case Poe.ParagraphStyle.AlignRight:
        return $('.ButtonAlignRight').children('button').addClass('Active');
    }
  };

}).call(this);

//# sourceMappingURL=Toolbar.js.map
